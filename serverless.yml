service:
  name: todo-serverless

package:
  excludeDevDependencies: true
  individually: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless todo app
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(validators/create-todo-request.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(validators/update-todo-request.json)}

  defaultStage: dev
  profiles:
    dev: default
    prod: prod

  prune:
    automatic: true
    number: 3

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    packager: npm
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  stage: ${opt.stage, 'dev'}
  profile: ${self:custom.profiles.${self:provider.stage}}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  deploymentBucket:
    serverSideEncryption: AES256
  environment:
    thundra_apiKey: v3t5LOgkkWsT7c+9kH8owsP/QEc+dhMAkMZL2xC26Wk=
    DEBUG: "*"
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SERVERLESS_STAGE: ${self:provider.stage}
    TODOS_TABLE: TODOS-Serverless-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    ATTACHMENTS_BUCKET: attachments-urls-${self:provider.stage}-${self:provider.region}
    CONNECTIONS_TABLE: Connections-${self:provider.stage}-${self:provider.region}

  tracing:
    lambda: true
    apiGateway: true

functions:
  GetTodos:
    tracing: Active
    handler: src/lambda/functions/GetTodos.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"
    events:
      - http:
          method: get
          path: /todos
          cors: true
          allowCredentials: true
  CreateTodo:
    tracing: Active
    handler: src/lambda/functions/NewTodo.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"
    events:
      - http:
          method: post
          path: /todos
          cors: true
          allowCredentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo item
            description: Create and insert item into todo table
            requestModels:
              'application/json': CreateTodoRequest
  UpdateTodo:
    tracing: Active
    handler: src/lambda/functions/UpdateTodo.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          allowCredentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new todo item
            description: Update and insert item into todo table
            requestModels:
              'application/json': UpdateTodoRequest
  DeleteTodo:
    tracing: Active
    handler: src/lambda/functions/DeleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          allowCredentials: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: '*'
  ConnectHandler:
    handler: "src/lambda/websocket/Connect.handler"
    events:
      -
        websocket:
          route: "$connect"
  DisconnectHandler:
    handler: "src/lambda/websocket/Disconnect.handler"
    events:
      -
        websocket:
          route: "$disconnect"

resources:
  - ${file(./services/apigateway/gateway.yml)}
  - ${file(./services/uploads/s3bucket.yml)}
  - ${file(./services/dynamodb/dynamodb.yml)}
  - ${file(./services/dynamodb/connections.yml)}

plugins:
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-plugin-thundra
  - serverless-offline
